/* This is a comment */

import "print" from "io" as "cout"
import "print" from "io"
import "math"

int g_status = 1

ns Global {
	int g
	struct Timezone {
	}
	ns Country {
		int h
		def DoGlobalCountryCalc() -> () {
		}
	}
	def DoGlobalCalc() -> () {
	}
}

struct GlobalPerson {
	int i1
	char c1
}

struct EmptyStruct {

}

union Flags {
	int i2
	char c2
	float32 f2
}

extend GlobalPerson {
	def stand(int a) -> (int) {
		int x
	}
	def sit(int a) -> (int) {
		int x
	}
	def run(int a) -> (int) {
		int x
	}
	def jump(int a) -> (int) {
		int x
	}
}

extend GlobalPerson1 {
}

/* The "main" function is entry point of the program. * This is test for multi-line comment */
def main(int a, bool b) -> (int) {
	bool a, b = false, c = true, d
	bool b = false
	int in1
	int in2 = 8x1237
	int8 i3 = 10x233
	int16 i4 = 16x1FF4ED
	int32 i5 = 3454
	int64 i6 = -12
	uint i7 = +12
	uint16 i9 = 16x1FF4ED
	uint32 i10 = 3454
	uint64 i11 = -12

	float32 f1 = 3.40282e+39
	float64 f1 = 123e7
	float128 f1 = 123.456e-67
	char c1 = 'a'
	char c2 = '\n'
	char c3 = 25
	string s2 = r'this is a test'
	string s1 = r"this is a test"
	string s4 = 'this is a test'
	string s3 = "this is a test"
	string s5 = r'''this is a test'''
	string s6 = r"""this is a test"""
	string s8 = '''this is a test'''
	string s7 = """this is a test"""
	ptr : int p1 = null
	ptr : struct Person s1
	struct Person p
	auto p2 = f()

	auto tpl = Calc<:int,float:>()

	static atomic bool isActive = true
	const int age = 200
	register int i1 = 2x1100111011001110

	type xint = int8

	foreach (auto a, auto c) in arr {
	}
	foreach (auto ac, cc) in list {
	}

	struct Human {
		int age
		char gender
		string name
	} h1 = {a, b, c}, h2 = {a, b, c}
	struct {
		/* this is useless */
		int anonymous
	}
	struct Zero {

	}
	union Bytes {
		int age
		char gender
		string name
	}
	enum Color {
		RED
		GREEN
		BLUE
	}

	a = b
	a = (b + c) - d
	c = a >> 1
	c = a << 1
	c = a >>> 1
	c = a <<< 1
	c = a || b
	c = a && b
	c = a & b
	c = a | b
	c = a ^ b
	c = a &^ c
	c = !a
	c = ~a
	c = @a
	c = *a

	z = a * *b
	z = a + *b
	z = a+++-b

	c = a[a] + b(100, c)
	b = -c + a.b->c
	a = b[10][100][20]
	a = [int](b + [float32]c)

	/* io.Print() */

	_, a, _ = compute()

	ptr : generic gP

	/* this is a pre comment */ int before_comment = 0
	io.Print(a, b)
	// int in_comment = 0
	int after_comment = 0 /* this is a post comment
	on two separate lines */

	if (a > b) {
		a = b
	}

	if (x > y) {
		x = y
	} else {
		x = x - y
	}

	if (x > y) {
		x = y
	} else if (x < y) {
		x = x - y
	} else if (x < y) {
		x = x - y
	} else {
		if (x > y) {
			x = y
		} else {
			x = x - y
		}
		x = 0
	}

	for (int c = 0; c < 100; c += 1) {
		/* math.inc(x) */
	}

	switch (x) {
		case (0) {
			print("X is 0")
			print("This is not correct")
			return
		}
		case (10, 20, 30) {
			print("X is less than 10, 20 & 30")
		}
		default {
			print("X is more than 10")
			print("This is not correct")
			return
		}
	}

	label1:
	while (x < 100) {
		x += 1
		x -= 1
	}

	defer {
		free(p = a + b)
	}

	{
		// This is a block
		x = 1
	}

	struct Person<:int,float:> p1
	ptr : struct Person<:int,float:> p2
	ptr : <:bool:>(int,float) -> (bool) f1

	return a + b, c
}

public def run(int a, int b, ptr : (int , int) -> (bool) c) -> () {
	int z = 0
	ptr : (int , int) -> (bool) f1
	return
}

private def calc(ptr : int a) -> () {
	return
}

def template1<:T, S:>(T a, S b) -> (T) {
	return
}

def template2<:T,S:>(T a, S b) -> (int) {
	struct Actor <:struct Producer<:struct Director<:int:>:>:> act1
}
