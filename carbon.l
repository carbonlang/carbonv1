/*
bison -y -d carbon.y 				# output : y.tab.c  y.tab.h
reflex  --flex --bison carbon.l			# output : lex.yy.cpp
cc -Wall -Wunused -Wextra -c y.tab.c		# output : y.tab.o
c++ -Wall -Wunused -Wextra -o carbon y.tab.o lex.yy.cpp ~/reflex/lib/libreflex.a
*/

%top{
	#include <cstdio>
	#include <iostream>
	#include <iomanip>
	#include "y.tab.h"	/* Generated by bison. */
	#define YY_EXTERN_C extern "C"
	using namespace std;
%}

%class{
%}

%init{
%}

%option bison noyywrap
%option unicode

bin_digit		[0-1]
oct_digit		[0-7]
dec_digit		[0-9]
hex_digit		[0-9A-F]

bin_lit			("+"|"-")?"2x"{bin_digit}+
oct_lit			("+"|"-")?"8x"{oct_digit}+
dec_lit			("+"|"-")?("10x")?{dec_digit}+
hex_lit			("+"|"-")?"16x"{hex_digit}+

float_exp		("e"|"E")("+"|"-")?{dec_digit}+
float_1			{dec_digit}+"."{dec_digit}*{float_exp}?
float_2			{dec_digit}+{float_exp}
float_3			"."{dec_digit}+{float_exp}
float_lit		("+"|"-")?{float_1}|{float_2}|{float_3}

escape_char		\\("a"|"b"|"f"|"n"|"r"|"t"|"v")
char_lit		"'"([a-zA-z]|{escape_char})"'"|[0-255]

letter			[a-zA-Z]
ident			{letter}({letter}|{dec_digit})*

%%

"/*".*"*/"							; /* Ignore all comments */

"module"							{ return MODULE; }
"import"							{ return IMPORT; }
"from"								{ return FROM; }
"as"								{ return AS; }

"def"								{ return DEF; }

"("								{ return '('; }
")"								{ return ')'; }
"["								{ return '['; }
"]"								{ return ']'; }
"{"								{ return '{'; }
"}"								{ return '}'; }
"->"								{ return DASH_GREATER; }
"~>"								{ return TIDLE_GREATER; }
"."								{ return '.'; }
":"								{ return ':'; }
";"								{ return ';'; }
","								{ return ','; }
"..."								{ printf("[ ... ]"); }

"register"							{ return REGISTER; }
"static"							{ return STATIC; }
"const"								{ return CONST; }
"volatile"							{ return VOLATILE; }
"restrict"							{ return RESTRICT; }
"atomic"							{ return ATOMIC; }
"const restrict"						{ return CONST_RESTRICT; }

"bool"								{ return BOOL; }
"char"								{ return CHAR; }
"byte"								{ return BYTE; }
"int"								{ return INT; }
"int8"								{ return INT8; }
"int16"								{ return INT16; }
"int32"								{ return INT32; }
"int64"								{ return INT64; }
"uint"								{ return UINT; }
"uint8"								{ return UINT8; }
"uint16"							{ return UINT16; }
"uint32"							{ return UINT32; }
"uint64"							{ return UINT64; }
"float32"							{ return FLOAT32; }
"float64"							{ return FLOAT64; }
"float128"							{ return FLOAT128; }

"string"							{ return STRING; }

"ptr"								{ return POINTER; }

"true"								{ return TRUE; }
"false"								{ return FALSE; }

"type"								{ return TYPE; }
"struct"							{ return STRUCT; }
"union"								{ return UNION; }
"enum"								{ return ENUM; }
"option"							{ return OPTION; }

{bin_lit}							{ return BINARY_LIT; }
{oct_lit}							{ return OCTAL_LIT; }
{dec_lit}							{ return DECIMAL_LIT; }
{hex_lit}							{ return HEX_LIT; }

{float_lit}							{ return FLOAT_LIT; }

{char_lit}							{ return CHAR_LIT; }

\"[^"]*\"							{ return STR1_LITERAL; }
\'[^']*\'							{ return STR2_LITERAL; }
"r"\"[^"]*\"							{ return RSTR1_LITERAL; }
"r"\'[^']*\'							{ return RSTR2_LITERAL; }

\"\"\"[^"""]*\"\"\"						{ return HSTR1_LITERAL; }
\'\'\'[^''']*\'\'\'						{ return HSTR2_LITERAL; }
"r"\"\"\"[^"""]*\"\"\"						{ return HRSTR1_LITERAL; }
"r"\'\'\'[^''']*\'\'\'						{ return HRSTR2_LITERAL; }

"null"								{ return PTR_NULL; }

"+"								{ return PLUS; }
"-"								{ return MINUS; }
"*"								{ return MULTIPLY; }
"/"								{ return DIVIDE; }
"%"								{ return MODULUS; }
"=="								{ return IS_EQUAL; }
"!="								{ return IS_NOT_EQUAL; }
"<"								{ return IS_LESS; }
">"								{ return IS_GREATER; }
"<="								{ return IS_LESS_OR_EQ; }
">="								{ return IS_GREATER_OR_EQ; }
">>"								{ return RIGHT_SHIFT; }
"<<"								{ return LEFT_SHIFT; }
">>>"								{ return RIGHT_SHIFT_US; }
"<<<"								{ return LEFT_SHIFT_US; }
"||"								{ return LOGICAL_OR; }
"&&"								{ return LOGICAL_AND; }
"&"								{ return BITWISE_AND; }
"|"								{ return BITWISE_OR; }
"^"								{ return BITWISE_NOT; }
"&^"								{ return BITWISE_XOR; }

"!"								{ return U_NOT; }
"~"								{ return U_2COMP; }
"$"								{ return U_POINTER; }
"@"								{ return U_ADD_OF; }
"++"								{ return U_INC; }
"--"								{ return U_DEC; }

"="								{ return EQUAL_TO; }

"public"							{ return PUBLIC; }
"private"							{ return PRIVATE; }

"return"							{ return RETURN; }
"break"								{ return BREAK; }
"continue"							{ return CONTINUE; }
"goto"								{ return GOTO; }
"fallthrough"							{ return FALLTHROUGH; }
"if"								{ return IF; }
"else"								{ return ELSE; }
"for"								{ return FOR; }
"while"								{ return WHILE; }
"do"								{ return DO; }
"switch"							{ return SWITCH; }
"case"								{ return CASE; }
"default"							{ return DEFAULT; }
"defer"								{ return DEFER; }
"extend"							{ return EXTEND; }

{ident}								{ return IDENTIFIER; }

%%
